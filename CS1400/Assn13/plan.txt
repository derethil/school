Software Development Lifecycle

Task 1
System Requirements
    This program will print out a single chessboard at a user-specified coordinate with a default length and width.
    The user can optionally speciify a custom length and width if they want.

System Analysis
    The program will use a main function in assn13-task1.py and import the Chessboard class from chessboard.py.

System Design
    1. Ask user for coordinate
    2. Ask user for optional length and/or width
    3. Define drawRectangle function that takes a turtle, height, and width that gets called in main()
    4. Define a drawRow function that takes a turtle, total height, total width, and # of rectangles
    5. Define drawAllRectangle function that draws the main grid of rectangles with turtle, total height, and total width parameters
        a. Draw main border box with a thickness of 10
        b. NUM_OF_RECTS constant to get length of chessboard in # of rectangles
        c. Set starting coord constants
        d. Draw each row in a loop and move to correct position for each one
    6. Call main()

Testing
    Input:
        0,0
        <blank>
        <blank>
    Output:
        Board with length and width of 250 and correct rectangles at 0,0
    Passed

    Input:
        500,-100
        100
        300
    Output:
        Board at 500,-100 with height of 300 and width of 100
    Passed

Unified Modeling Language
    ----------------------------------------
    Chessboard
    ----------------------------------------
    -startX: integer
    -startY: integer
    -height: integer
    -width: integer
    -tur: turtle 
    ----------------------------------------
    draw(): None
    -drawRectangle(rectHeight: integer, rectWidth: integer): None
    -drawRow(rectCount: integer): None
    -drawAllRectangles(): None
    ----------------------------------------

Task 2
System Requirements
    This program will ask the user for a password and checks its validity.

System Analysis
    The program will import the Password class from password.py and use it in assn13-task2.py.
    The validity of the password is tested against the following:
    
    - Must have at least 8 characters
    - Must only consist of letters and digits
    - Must contain two digits
    - Must not contain the word 'password'
    - Must not end with '123'

System Design
    1. Create a new Password object 
    2. setPassword() with user-defined password
        isValid()
            1. Check validity
            2. Print getErrorMessage() method if false
    3. Ask user if they want to check another password

Testing
    Input: password123
    Output:
        Must not end with '123'
        Must not contain the word 'password'
        Would you like to test another?
    Passed - Had to test isalnum() False, not True
    
    Input: s3cur3pssw0rd
    Output: 
        Password is valid.
        Would you like to test another?
    Passed

Unified Modeling Language
    ----------------------------------------
    Password
    ----------------------------------------
    -passText: string
    -message: string
    -valid: boolean
    ----------------------------------------
    setPassword(passText: string): None
    isValid(): boolean
    getErrorMessage(): string
    -resetPassword(): None
    ----------------------------------------


