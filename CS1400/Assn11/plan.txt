Software Development Lifecycle

System Requirements
    This program needs to be able to draw two different kinds of shapes - a circle made of rectangles and a circle made of circles. 
    The user chooses between them and provides valid input before the program does so.
    It also needs to be able to draw X number of these randomly as another choice from the user. 
    After any option is complete, the user needs to have the choice of quitting, staying and resetting the turtle window, or staying.

System Analysis
    assn11.py asks user for inputs (center point, offset, count, rotation/height/width/radius) and pass them to their needed functions in pattern.py
    main() is the only funciton in assn11.py and imports everything else it needs from pattern.py

System Design
    Assn11.py:
        1. Main loop
        2. Ask user to select mode
            a. If rectangles, ask user for center point, offset, height, width, count, and rotation
            b. If circles, ask user for center point, offset, radius, and count
            c. If super, ask user for # of shapes
        3. Call the respective function and draw the shape/s
        4. Ask user if they want to play again
        5. Continue, call reset(), or break loop
        6. When done, call pattern.done()
    pattern.py
        Define the following functions:
            - reset
                1. Reset the turtle screen
                2. Call setup() again
            - setup
            - drawRectanglePattern
                1. Go to the center of the shape
                2. For each rectangle,
                    a. Rotate to correct angle (# of rectangles already done * angle)
                    b. Go forward offset units
                    c. Draw rectangle
                    d. Go back to center position
            - drawRectangle
                1. Use a parameter of color and draw a rectangle in that color
            - drawCirclePattern
                1. Go to center of the shape
                2. For each circle,
                    a. Rotate to correct angle (# of circles already done * angle)
                    b. Go forward offset units
                    c. Turn right to make closest point offset units away
                    d. Draw a circle
                    e. Go back to center position
            - drawSuperPattern
                1. Loop user-specified # of times
                2. Generate shared parameters (centerPos, count, offset)
                3. Pick pattern type
                4. Generate pattern-specific parameters (hight, width, rotation, radius)
                5. Call functions accordingly
            - setRandomColor
            - done
                1. Use turtle.done() to leave it open

Testing
    Tested using the parameters in the video
    Passed